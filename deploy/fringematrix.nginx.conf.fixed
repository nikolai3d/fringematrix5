# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name fringematrix.art www.fringematrix.art;
    return 301 https://$host$request_uri;
}

# Main HTTPS server with branch routing
server {
    server_name fringematrix.art www.fringematrix.art; # managed by Certbot

    # Static assets should always go to main app (port 3000)
    # This prevents assets from being treated as branch names
    location /assets/ {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Other common static paths that should go to main
    location /favicon.ico {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    location /robots.txt {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Branch deployments - dynamic routing
    # This handles URLs like /test-branch/, /pr-123/, etc.
    # Exclude common static paths and single-word paths that aren't branches
    location ~ ^/([a-zA-Z0-9][a-zA-Z0-9_-]+)(/.*)?$ {
        set $branch $1;
        set $path $2;
        
        # Skip if this looks like a static asset or common path
        if ($branch ~* ^(assets|static|public|images|css|js|fonts)$) {
            return 404;
        }
        
        # Calculate port based on branch name hash (same logic as deploy script)
        # For now, we'll use a map for known branches and fallback to 3001
        set $backend_port 3001;
        
        # Known branch mappings (add more as needed)
        if ($branch = "test-branch") {
            set $backend_port 3033;
        }
        
        # Try to proxy to the calculated port
        proxy_pass http://127.0.0.1:$backend_port$path;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Add custom header to identify which branch is being served
        proxy_set_header X-Branch-Name $branch;
    }

    # Main production site (version: main) - this should be last
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/fringematrix.art/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/fringematrix.art/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# Fallback HTTP server (managed by Certbot)
server {
    if ($host = www.fringematrix.art) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    if ($host = fringematrix.art) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name fringematrix.art www.fringematrix.art;
    return 404; # managed by Certbot
}